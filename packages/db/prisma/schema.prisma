// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  twitterId         String   @unique
  username          String   @unique
  name              String
  profileImageUrl   String?
  verified          Boolean  @default(false)
  description       String?
  followersCount    Int      @default(0)
  followingCount    Int      @default(0)
  tweetsCount       Int      @default(0)
  listedCount       Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tweets            Tweet[]
  nftDistributions  NFTDistribution[]

  @@index([username])
  @@index([createdAt])
}

model Tweet {
  id                String   @id @default(cuid())
  tweetId           String   @unique
  text              String
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime
  retweetCount      Int      @default(0)
  replyCount        Int      @default(0)
  likeCount         Int      @default(0)
  quoteCount        Int      @default(0)
  viewCount         Int      @default(0)
  bookmarkCount     Int      @default(0)
  isRetweet         Boolean  @default(false)
  isQuote           Boolean  @default(false)
  isReply           Boolean  @default(false)
  hasMedia          Boolean  @default(false)
  tickerSymbols     String[] // Array of ticker symbols mentioned
  influenceScore    Float?   // Calculated influence score
  fetchedAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  parentTweetId     String?
  parentTweet       Tweet?   @relation("TweetReplies", fields: [parentTweetId], references: [id])
  replies           Tweet[]  @relation("TweetReplies")

  nftDistributions  NFTDistribution[]

  @@index([userId])
  @@index([createdAt])
  @@index([tickerSymbols])
  @@index([influenceScore])
}

model NFTDistribution {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  tweetId           String
  tweet             Tweet    @relation(fields: [tweetId], references: [id])
  nftTokenId        String?
  transactionHash   String?
  walletAddress     String
  amount            Int      @default(1)
  status            DistributionStatus @default(PENDING)
  blockchain        Blockchain @default(SOLANA)
  error             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, tweetId])
  @@index([status])
  @@index([blockchain])
  @@index([createdAt])
}

model SystemConfig {
  id                String   @id @default(cuid())
  key               String   @unique
  value             Json
  description       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CrawlerLog {
  id                String   @id @default(cuid())
  type              String   // "user_fetch", "tweet_fetch", "community_fetch"
  status            String   // "success", "error", "partial"
  message           String?
  metadata          Json?    // Additional data like counts, errors, etc.
  startedAt         DateTime
  completedAt       DateTime?
  createdAt         DateTime @default(now())

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum DistributionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Blockchain {
  SOLANA
  ETHEREUM
  POLYGON
  ARBITRUM
  OPTIMISM
}
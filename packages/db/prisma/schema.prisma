generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  twitterId       String   @unique @db.VarChar(20)
  handle          String   @unique @db.VarChar(20)
  name            String
  profileImageUrl String?
  verified        Boolean  @default(false)
  description     String?
  followersCount  Int      @default(0)
  followingCount  Int      @default(0)
  tweetsCount     Int      @default(0)
  listedCount     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Tweet {
  tweetId        String   @db.VarChar(20)
  text           String
  twitterId      String   @db.VarChar(20)
  retweetCount   Int      @default(0)
  replyCount     Int      @default(0)
  likeCount      Int      @default(0)
  quoteCount     Int      @default(0)
  viewCount      Int      @default(0)
  bookmarkCount  Int      @default(0)
  isRetweet      Boolean  @default(false)
  isQuote        Boolean  @default(false)
  isReply        Boolean  @default(false)
  hasMedia       Boolean  @default(false)
  tickerSymbols  String[] // Array of ticker symbols mentioned
  parentTweetId  String?
  fetchedAt      DateTime
  tweetCreatedAt DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([tweetId, fetchedAt])
  @@index([twitterId])
  @@index([fetchedAt])
  @@index([tickerSymbols], type: Gin)
}

model CampaignTweet {
  id         Int      @id @default(autoincrement())
  tweetId    String   @db.VarChar(20)
  campaignId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([tweetId, campaignId])
  @@index([campaignId])
}

model NFTDistribution {
  id              Int                @id @default(autoincrement())
  userId          Int
  tweetId         Int
  nftTokenId      String?
  transactionHash String?
  walletAddress   String
  amount          Int                @default(1)
  status          DistributionStatus @default(PENDING)
  blockchain      Blockchain         @default(SOLANA)
  error           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([userId, tweetId])
  @@index([status])
  @@index([blockchain])
}

model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum CrawlerTaskType {
  USER_FETCH
  TWEET_FETCH
  COMMUNITY_FETCH
}

enum CrawlerTaskStatus {
  QUEUED
  PROCESSING
  SUCCESS
  FAILED
}

model CrawlerTask {
  id          Int               @id @default(autoincrement())
  type        CrawlerTaskType
  status      CrawlerTaskStatus @default(QUEUED)
  metadata    Json?
  result      Json?
  sourceId    String?
  attempts    Int               @default(0)
  maxAttempts Int               @default(3)
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([sourceId])
  @@index([startedAt])
  @@index([completedAt])
}

enum DistributionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum Blockchain {
  SOLANA
  ETHEREUM
  POLYGON
  ARBITRUM
  OPTIMISM
}

model Wallet {
  id        Int      @id @default(autoincrement())
  address   String   @unique @db.VarChar(44)
  isPrimary Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum CampaignStatus {
  UPCOMING
  ONGOING
  ENDED
  CANCELED
}

model Campaign {
  id              Int            @id @default(autoincrement())
  description     String
  tokenAddress    String         @db.VarChar(44)
  tokenName       String
  ticker          String?
  totalAmount     String
  remainingAmount String
  marketCap       String?
  startTime       DateTime
  endTime         DateTime
  tags            String[]
  socialLinks     Json
  status          CampaignStatus
  creatorId       Int
  txHash          String?        @db.VarChar(88)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index(tokenAddress)
  @@index(startTime)
  @@index(endTime)
  @@index(creatorId)
  @@index([tags], type: Gin)
}

enum TokenPoolType {
  LAUNCH
  FUND
}

model TokenPool {
  id         Int           @id @default(autoincrement())
  campaignId Int
  txHash     String        @db.VarChar(88)
  amount     String
  type       TokenPoolType
  creatorId  Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index(campaignId)
  @@index(creatorId)
  @@index(txHash)
}

model Participation {
  id             Int      @id @default(autoincrement())
  campaignId     Int
  userId         Int
  twitterId      String   @db.VarChar(20)
  influenceScore Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, campaignId])
  @@unique([twitterId, campaignId])
  @@index(campaignId)
}

model ClaimRecord {
  id         Int      @id @default(autoincrement())
  campaignId Int
  userId     Int
  amount     String
  claimed    Boolean
  txHash     String?  @db.VarChar(88)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index(campaignId)
  @@index(userId)
  @@index(txHash)
}

model Whitelist {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  twitterId    String  @unique @db.VarChar(20)
  referralCode String  @unique
  status       String  @default("registered") @db.VarChar(15) // 'registered', 'can_claim', 'claimed'
  postLink     String?

  registeredAt DateTime? @default(now())
  followedAt   DateTime?
  postedAt     DateTime?
  referredAt   DateTime?
  claimedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referral {
  id                Int      @id @default(autoincrement())
  referrerId        Int
  referrerTwitterId String   @db.VarChar(20)
  refereeId         Int
  refereeTwitterId  String   @db.VarChar(20)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([referrerId, refereeId])
  @@unique([referrerTwitterId, refereeTwitterId])
}

model TokenInformation {
  id                   Int      @id @default(autoincrement())
  mint                 String   @unique @db.VarChar(44)
  name                 String?
  symbol               String?
  uri                  String?
  platform             String   @default("pumpfun")
  marketValue          Float
  virtualSolReserves   String
  virtualTokenReserves String
  realSolReserves      String
  realTokenReserves    String
  isComplete           Boolean  @default(false)
  lastTransactionType  String?
  blockTime            Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime

  @@index([isComplete])
  @@index([marketValue])
  @@index([platform])
  @@index([symbol])
}

model Community {
  id              Int            @id @default(autoincrement())
  communityId     String         @db.VarChar(20)
  name            String
  description     String
  creationTime    DateTime
  tokenAddress    String         @db.VarChar(44)
  tokenName       String
  ticker          String?
  platform        String
  memberCount     Int            @default(0)
  moderatorCount  Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index(communityId)
  @@index(ticker)
  @@index(tokenAddress)
}

model CommunityUser {
  id              Int      @id @default(autoincrement())
  twitterId       String   @db.VarChar(20)
  handle          String   @db.VarChar(20)
  name            String
  description     String?
  communityId     String[]
  location        String?
  profileImageUrl String?
  followersCount  Int      @default(0)
  followingCount  Int      @default(0)
  friendsCount Int      @default(0)
  tweetsCount     Int      @default(0)
  listedCount     Int      @default(0)
  favouritesCount Int      @default(0)
  verified        Boolean  @default(false)
  protected       Boolean  @default(false)
  isBlueVerified  Boolean  @default(false)
  creationTime    DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique(twitterId)
  @@unique(handle)
  @@index([communityId], type: Gin)
  @@index(creationTime)
}

model CommunityTweet {
  tweetId        String   @db.VarChar(20) @unique
  text           String
  twitterId      String   @db.VarChar(20)
  communityId    String   @db.VarChar(20)
  retweetCount   Int      @default(0)
  replyCount     Int      @default(0)
  likeCount      Int      @default(0)
  quoteCount     Int      @default(0)
  viewCount      Int      @default(0)
  bookmarkCount  Int      @default(0)
  isRetweet      Boolean  @default(false)
  isQuote        Boolean  @default(false)
  isReply        Boolean  @default(false)
  hasMedia       Boolean  @default(false)
  symbols  String[] // Array of ticker symbols mentioned
  hashtags String[]
  urls String[]
  mentions String[]
  lang String?
  parentTweetId  String?
  fetchedAt      DateTime
  tweetCreatedAt DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@id([tweetId, fetchedAt])
  @@index([twitterId])
  @@index([fetchedAt])
  @@index([symbols], type: Gin)
  @@index([hashtags], type: Gin)
  @@index([mentions], type: Gin)
}